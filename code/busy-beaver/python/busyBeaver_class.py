#Define optimal beaver rules for 2 state
beaver_rules2 =    {'a0': 'b1r', 'a1': 'b1l',
                    'b0': 'a1l', 'b1': 'h1r'}

beaver_rules5 =    {'a0': 'b1r', 'a1': 'b1l',
                    'b0': 'a1l', 'b1': 'c1r',
                    'c0': 'd1r', 'c1': 'b1r',
                    'd0': 'e1l', 'd1': 'e1r',
                    'e0': 'd1r', 'e1': 'h1r'}

class turingMachine:
    def __init__(self, rule_set):
      self.rules = rule_set
      self.state = 'a' #initial state
      self.pos = 0 #initial position
      self.tape = [0] #tape
      self.halt = 'h' #state at which the program will halt

    def move(self, rule):
        self.state = rule[0] #update state
        self.tape[self.pos] = int(rule[1]) #marking the turing tape

        if rule[2] == 'l':
            self.pos -= 1
        elif rule[2] == 'r':
            self.pos += 1
        if self.pos < 0:
            self.tape.insert(0,0) #adds 0 to the front of the list
            self.pos = 0
        if self.pos >= len(self.tape): #adds 0 to the end of the list
            self.tape.append(0)

    def run_turing(self,readout=True):
        #rules will be applied until we reach the halt state
        while self.state != self.halt:

            if readout:

                print('State: {}, Tape: {}'.format(self.state,self.tape))

            #retrieve rule - where are we and what is the correspoding rule in our dictionary
            rule_key = '{}{}'.format(self.state, self.tape[self.pos]) #what is the current rule for that rule key/state
            current_rule = self.rules[rule_key]

             #applying rule
            self.move(current_rule)
        if readout:
            print('State: halt, Tape: {}'.format(self.tape))

        #Calculate number of 1's generated by "busy beaver"
        N1 = sum(self.tape)
        print('This set of rules produced {} data points'.format(N1))


#run turing machine
#Choose your states:
state = input("choose your n-state {2 or 5}: ")
if state == '2':
    states = beaver_rules2
elif state == '5':
    states = beaver_rules5

tm = turingMachine(states)
tm.run_turing()
